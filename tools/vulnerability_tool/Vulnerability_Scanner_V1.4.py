import os
import re
import sys
import docx

# Define Vulnerability Patterns for JavaScript files
JS_Patterns = {
    "Sql_Injection": re.compile(r'\.query\s*\(.*\+.*\)'),
    "XSS": re.compile(r'res\.send\s*\(.*\+.*\)'),
    "Command_Injection": re.compile(r'exec\s*\(.*\+.*\)'),
    "insecure_file_handling": re.compile(r'fs\.unlink\s*\(.*\)'),
    "insecure_file_upload": re.compile(r'multer\s*\(\s*{.*dest.*}\s*\)'),
    "Eval_Function": re.compile(r'eval\s*\(.*\)'),
    "Directory_Movement": re.compile(r'fs\.readFile\s*\(.*\.\./.*\)'),
    "Insecure_Token_Generation": re.compile(r'Math\.random\s*\(\)'),
    "Dangerous_Permission_Level": re.compile(r'fs\.chmod\s*\(.*\)'),
    "Redirects": re.compile(r'res\.redirect\s*\(.*req\.query\..*\)'),
    "API_Key_Hardcoded": re.compile(r'api_key\s*=\s*[\'"]\S+[\'"]'),
    "Weak_Hashing_Algorithm": re.compile(r'(md5|sha1|des)\s*\('),
    "Planetext_Credentials": re.compile(r'(username|password)\s*=\s*[\'"]\S+[\'"]'),
    "Insecure_SSL_Config": re.compile(r'server\.listen\s*\(.*http.*\)'),
    "HTTP_Called": re.compile(r'http\.get\s*\(.*\)'),
    "Sensitive_Data_Logging": re.compile(r'console\.(log|debug|error|warn)\s*\(.*(password|secret|key|token).*\)'),
    "JSON_Parsing_No_Validation": re.compile(r'JSON\.parse\s*\(.*req\.(body|query|params).*\)'),
    "Environment_Variables_In_Planetext": re.compile(r'process\.env\.[a-zA-Z_][a-zA-Z0-9_]*\s*=\s*[\'"]\S+[\'"]'),
    "Debug_Left_Exposed": re.compile(r'app\.get\s*\([\'"]\.\*/debug.*[\'"]'),
    "Insecure_File_Paths": re.compile(r'(fs\.(readFile|writeFile))\s*\(.*req\.(body|query|params)\.path.*\)'),
    "Unsecured_Spawn": re.compile(r'spawn\s*\(.*\)')
}

Python_Patterns = {
    "Eval_Function": re.compile(r'eval\s*\(.*\)'),
    "Exec_Function": re.compile(r'exec\s*\(.*\)'),
    "OS_Command_Injection": re.compile(r'os\.(system|popen)\s*\(.*\)'),
    "Subprocess_Injection": re.compile(r'subprocess\.(Popen|call|run)\s*\(.*\)'),
    "Pickle_Load": re.compile(r'pickle\.load\s*\(.*\)'),
    "Hardcoded_Credentials": re.compile(r'(username|password)\s*=\s*[\'"]\S+[\'"]'),
    "Weak_Hashing_Algorithm": re.compile(r'(md5|sha1|des)\s*\('),
    "Insecure_Random": re.compile(r'random\.randint\s*\(.*\)'),
    "Unverified_SSL": re.compile(r'requests\.get\s*\(.*verify\s*=\s*False\)'),
    "Dangerous_File_Access": re.compile(r'open\s*\(.*\)'),
    "Environment_Variables_Exposure": re.compile(r'os\.environ\[\s*[\'"]\S+[\'"]\s*\]'),
    "Debug_Logging": re.compile(r'print\s*\(.*(password|secret|key|token).*\)'),
    "Deserialization_Risk": re.compile(r'json\.loads\s*\(.*\)'),
    "Unsecured_Spawn": re.compile(r'os\.spawn\s*\(.*\)')
}

Word_Patterns = {
    "Hardcoded_Credentials": re.compile(r'(username|password)\s*=\s*[\'"]\S+[\'"]'),
    "Sensitive_Keywords": re.compile(r'(confidential|private|classified|top secret)', re.IGNORECASE),
    "Email_Addresses": re.compile(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+'),
    "Phone_Numbers": re.compile(r'\b(?:\+\d{1,3})?[-.\s]?(\d{2,4})?[-.\s]?\d{3}[-.\s]?\d{4}\b'),
    "URLs": re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')
}

TXT_Patterns = {
    "Hardcoded_Credentials": re.compile(r'(username|password|token|secret|access[_-]?key)\s*[:=]\s*[\'"]?\S+[\'"]?', re.IGNORECASE),
    "Sensitive_Keywords": re.compile(r'\b(confidential|private|classified|secret|token|proprietary)\b', re.IGNORECASE),
    "Email_Addresses": re.compile(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+'),
    "URLs": re.compile(r'https?://[^\s]+'),
    "IP_Addresses": re.compile(r'\b(?:\d{1,3}\.){3}\d{1,3}\b'),
    "AWS_Credentials": re.compile(r'AKIA[0-9A-Z]{16}'),
    "API_Keys": re.compile(r'(?i)(api[_-]?key|access[_-]?token)\s*[:=]\s*[\'"]?[A-Za-z0-9\-_]{20,}'),
    "JWT_Tokens": re.compile(r'eyJ[A-Za-z0-9_-]{10,}\.[A-Za-z0-9._-]{10,}\.[A-Za-z0-9._-]{10,}')
}

YML_Patterns = {
    "Hardcoded_Credentials": re.compile(r'(username|password|token|secret|access[_-]?key)\s*:\s*[\'"]?\S+[\'"]?', re.IGNORECASE),
    "Sensitive_Keywords": re.compile(r'\b(confidential|private|classified|secret|proprietary)\b', re.IGNORECASE),
    "Email_Addresses": re.compile(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+'),
    "URLs": re.compile(r'https?://[^\s]+'),
    "IP_Addresses": re.compile(r'\b(?:\d{1,3}\.){3}\d{1,3}\b'),
    "AWS_Credentials": re.compile(r'AKIA[0-9A-Z]{16}'),
    "API_Keys": re.compile(r'(?i)(api[_-]?key|access[_-]?token)\s*:\s*[\'"]?[A-Za-z0-9\-_]{20,}'),
    "Unsafe_YAML_Object": re.compile(r'!!python/(object|module|function)')
}


def AnalyseFile(FileLocation, patterns):
    vulnerabilities = {key: [] for key in patterns.keys()}
    try:
        with open(FileLocation, 'r', encoding='utf-8') as file:
            Data = file.read()
    except Exception as e:
        print(f"Error reading file {FileLocation}: {e}")
        return None
    for key, pattern in patterns.items():
        matches = pattern.findall(Data)
        if matches:
            vulnerabilities[key].extend(matches)
    return vulnerabilities

def AnalyseWordFile(FileLocation):
    vulnerabilities = {key: [] for key in Word_Patterns.keys()}
    try:
        doc = docx.Document(FileLocation)
        text_data = "\n".join([para.text for para in doc.paragraphs])
    except Exception as e:
        print(f"Error reading file {FileLocation}: {e}")
        return None
    for key, pattern in Word_Patterns.items():
        matches = pattern.findall(text_data)
        if matches:
            vulnerabilities[key].extend(matches)
    return vulnerabilities

def get_modified_files():
    return os.getenv("MODIFIED_FILES", "").split()

def PrintOutcome(Data):
    Outside = max(len(line) for line in Data.splitlines()) + 4
    print('|' + '-' * (Outside - 2) + '|')
    for line in Data.splitlines():
        print(f"| {line.ljust(Outside - 4)} |")
    print('|' + '-' * (Outside - 2) + '|')

def main():
    modified_files = get_modified_files()
    print(modified_files)
    if not modified_files:
        print("No modified files detected.")
        return
    for file in modified_files:
        if not os.path.exists(file):
            print(f"File not found: {file}")
            continue
        print(f"Detected new file: {file}")
        if file.endswith(".js"):
            print(f"Scanning {file} for vulnerabilities...")
            patterns = JS_Patterns
            vulnerabilities = AnalyseFile(file, patterns)
        elif file.endswith(".py"):
            print(f"Scanning {file} for vulnerabilities...")
            patterns = Python_Patterns
            vulnerabilities = AnalyseFile(file, patterns)
        elif file.endswith(".docx"):
            print(f"Scanning {file} for vulnerabilities...")
            vulnerabilities = AnalyseWordFile(file)
        elif file.endswith(".txt"):
            print(f"Scanning {file} for vulnerabilities...")
            vulnerabilities = AnalyseFile(file, TXT_Patterns)
        elif file.endswith(".yml") or file.endswith("yaml"):
            print(f"Scanning {file} for vulnerabilities...")
            vulnerabilities = AnalyseFile(file, YML_Patterns)
        else:
            print(f"{file} is not a JavaScript, Python or Word file. Skipping...")
            continue

        if vulnerabilities and any(vulnerabilities.values()):
            Outcome = f"Potential Vulnerability Found in {file}:\n"
            for key, found in vulnerabilities.items():
                if found:
                    Outcome += f"  {key.replace('_', ' ').title()} vulnerabilities:\n"
                    for q in found:
                        Outcome += f"    - {q}\n"
        else:
            Outcome = f"No vulnerabilities found in {file}."
        PrintOutcome(Outcome)

if __name__ == "__main__":
    main()
