const { addHistory, getHistory, deleteHistory } = require('../model/chatbotHistory');
const fetch = require('node-fetch');

// Get response message generated by chatbot
// Used by [POST] localhost/api/chatbot/query

const getChatResponse = async (req, res) => {
  // Get input string from user
  const { user_id, user_input } = req.body;

  try {
    // Validate input data
    if (!user_id || !user_input) {
      return res.status(400).json({
        error: "Missing required fields: user_id and user_input are required"
      });
    }

    if (typeof user_input !== 'string' || user_input.trim().length === 0) {
      return res.status(400).json({
        error: "Invalid input: user_input must be a non-empty string"
      });
    }

    // For now, use a simple response if AI server is not available
    let responseText = `I understand you're asking about "${user_input}". How can I help you with that?`;
    
    try {
      // Send request to API server and get response
      const ai_response = await fetch("http://localhost:8000/ai-model/chatbot/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          "query": user_input
        })
      });
      
      const result = await ai_response.json();

      // Validate response data
      if (result && result.msg) {
        responseText = result.msg;
      }
    } catch (aiError) {
      console.error("Error connecting to AI server:", aiError);
      // Continue with fallback response
    }

    // Store chat history
    try {
      await addHistory(user_id, user_input, responseText);
    } catch (dbError) {
      console.error("Error storing chat history:", dbError);
    }

    // Return response to user
    return res.status(200).json({
      message: "Success",
      response_text: responseText
    });
    
  } catch (error) {
    console.error("Error in chatbot response:", error);
    return res.status(500).json({
      error: "Internal server error"
    });
  }
};

// Get response message generated by chatbot
// Used by [POST] localhost/api/chatbot/add_urls
const addURL = async (req, res) => {
  // Get input string from user
  const { urls } = req.body;

  try {
    // Validate input data
    if (!urls) {
      return res.status(400).json({
        error: "Invalid input data, urls not found"
      });
    }

    try {
      // Send request to API server and get response
      const ai_response = await fetch(`http://localhost:8000/ai-model/chatbot/add_urls?urls=${urls}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        }
      });
      
      const result = await ai_response.json();

      // Validate response data and send corresponding error message
      if (!result) {
        return res.status(400).json({
          error: "An error occurred when fetching result from AI server"
        });
      }

      // Return response to user
      return res.status(200).json({
        message: "Success",
        result: result
      });
    } catch (aiError) {
      console.error("Error connecting to AI server:", aiError);
      return res.status(503).json({
        error: "AI server unavailable"
      });
    }
    
  } catch (error) {
    console.error("Error processing URL:", error);
    return res.status(500).json({
      error: "Internal server error"
    });
  }
};

// Get response message generated by chatbot
// Used by [POST] localhost/api/chatbot/add_pdfs
const addPDF = async (req, res) => {
  // Get input string from user
  const { pdfs } = req.body;

  try {
    // Placeholder implementation
    return res.status(200).json({
      message: "Success",
      result: "This is dummy response"
    });
  } catch (error) {
    console.error("Error in chatbot response:", error);
    return res.status(500).json({
      error: "Internal server error",
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// Retrieve the saved chat history stored in database
// Used by [POST] localhost/api/chatbot/history
const getChatHistory = async (req, res) => {
  const { user_id } = req.body;

  try {
    // Validate input data
    if (!user_id) {
      return res.status(400).json({
        error: "Missing required field: user_id is required"
      });
    }

    const history = await getHistory(user_id);
    
    if (!history) {
      return res.status(404).json({
        error: "No chat history found for this user"
      });
    }

    return res.status(200).json({
      message: "Chat history retrieved successfully",
      chat_history: history
    });
  } catch (error) {
    console.error("Error retrieving chat history:", error);
    return res.status(500).json({
      error: "Internal server error",
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// Clear the chat history stored in database
// Used by [DELETE] localhost/api/chatbot/history
const clearChatHistory = async (req, res) => {
  const { user_id } = req.body;

  try {
    // Validate input data
    if (!user_id) {
      return res.status(400).json({
        error: "Missing required field: user_id is required"
      });
    }

    await deleteHistory(user_id);
    return res.status(200).json({
      message: "Chat history cleared successfully"
    });
  } catch (error) {
    console.error("Error clearing chat history:", error);
    return res.status(500).json({
      error: "Internal server error",
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

module.exports = {
  getChatResponse,
  addURL,
  addPDF,
  getChatHistory,
  clearChatHistory
};