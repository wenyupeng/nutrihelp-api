openapi: 3.0.0
info:
  title: NutriHelp API
  version: 1.0.0
servers:
  - url: http://localhost/api
paths:
  /upload:
    post:
      summary: Upload a file
      description: Upload JPG, PNG, or PDF (max 5MB, limited to 5 uploads per 10 minutes)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded successfully
        '400':
          description: Upload failed due to size/type restriction
        '429':
          description: Too many uploads from this IP (rate limit exceeded)
  /appointments:
    post:
      summary: Save appointment data
      description: Receives a user ID, date, time, and description, and saves the appointment data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '201':
          description: Appointment saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Retrieve all appointment data
      description: Returns a JSON array containing all appointments
      responses:
        '200':
          description: Appointments fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /contactus:
    post:
      summary: Contact us
      description: Receives a contact request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
      responses:
        '201':
          description: Data received successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - missing required fields
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /fooddata/dietaryrequirements:
    get:
      summary: Get dietary requirements
      description: Retrieves a list of dietary requirements
      responses:
        '200':
          description: List of dietary requirements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNamePair'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /fooddata/cuisines:
    get:
      summary: Get cuisines
      description: Retrieves a list of cuisines
      responses:
        '200':
          description: List of cuisines
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNamePair'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /fooddata/allergies:
    get:
      summary: Get allergies
      description: Retrieves a list of allergies
      responses:
        '200':
          description: List of allergies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNamePair'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /fooddata/ingredients:
    get:
      summary: Get ingredients
      description: Retrieves a list of ingredients (name and ID only)
      responses:
        '200':
          description: List of ingredients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNamePair'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /fooddata/cookingmethods:
    get:
      summary: Get cooking methods
      description: Retrieves a list of cooking methods
      responses:
        '200':
          description: List of cooking methods
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNamePair'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /fooddata/spicelevels:
    get:
      summary: Get spice levels
      description: Retrieves a list of spice levels
      responses:
        '200':
          description: List of spice levels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNamePair'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /fooddata/healthconditions:
    get:
      summary: Get health conditions
      description: Retrieves a list of health conditions
      responses:
        '200':
          description: List of health conditions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNamePair'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /imageClassification:
    post:
      summary: Image classification
      description: Receives an image and classifies it
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image classified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  prediction:
                    type: string
                    example: "Avocado:~160 calories per 100 grams"
        '400':
          description: Bad request - missing image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /recipeImageClassification:
    post:
      summary: Recipe image classification
      description: Receives an image of a recipe and classifies it
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image classified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  prediction:
                    type: string
                    example: "Lasagna"
        '400':
          description: Bad request - missing image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /login:
    post:
      summary: User login
      description: Authenticates user and returns a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful, JWT token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/JWTResponse'
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          description: Email and password are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /login/mfa:
    post:
      summary: Multi-factor authentication
      description: Authenticates user with multi-factor authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginWithMFARequest'
      responses:
        '200':
          description: MFA successful, JWT token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/JWTResponse'
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          description: Email and password are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /mealplan:
    get:
      summary: Get meal plan
      description: Retrieves a meal plan for the user
      # TODO should not use requestBody for GET
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                user_id:
                  type: integer
      responses:
        '200':
          description: Meal plan fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMealPlanRequest'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Save meal plan
      description: Receives a meal plan and saves it
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlanResponse'
      responses:
        '201':
          description: Meal plan saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete meal plan
      description: Deletes the user's meal plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                user_id:
                  type: integer
      responses:
        '204':
          description: Meal plan deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /recipe:
    post:
      summary: Get all recipes
      description: Retrieves recipes for a given user ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
      responses:
        '200':
          description: Recipe fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        created_at:
                          type: string
                        recipe_name:
                          type: string
                        cuisine_id:
                          type: integer
                        total_servings:
                          type: integer
                        preparation_time:
                          type: integer
                        ingredients:
                          type: object
                          properties:
                            id:
                              type: array
                              items:
                                type: integer
                            quantity:
                              type: array
                              items:
                                type: integer
                            category:
                              type: array
                              items:
                                type: string
                            name:
                              type: array
                              items:
                                type: string
                        instructions:
                          type: string
                        calories:
                          type: number
                        fat:
                          type: number
                        carbohydrates:
                          type: number
                        protein:
                          type: number
                        fiber:
                          type: number
                        vitamin_a:
                          type: number
                        vitamin_b:
                          type: number
                        vitamin_c:
                          type: number
                        vitamin_d:
                          type: number
                        sodium:
                          type: number
                        sugar:
                          type: number
                        cuisine_name:
                          type: string

        '400':
          description: User ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Recipes, ingredients, or cuisines not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /signup:
    post:
      summary: User signup
      description: Registers a new user with an email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - either missing email/password or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /userfeedback:
    post:
      summary: User feedback
      description: Receives user feedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
      responses:
        '201':
          description: Feedback received successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/preferences:
    get:
      summary: Get user preferences
      description: Retrieves a list of user preferences
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: List of user preferences
          content:
            application/json:
              schema:
                type: object
                properties:
                  dietary_requirements:
                    type: array
                    items:
                      $ref: '#/components/schemas/IDNamePair'
                  allergies:
                    type: array
                    items:
                      $ref: '#/components/schemas/IDNamePair'
                  cuisines:
                    type: array
                    items:
                      $ref: '#/components/schemas/IDNamePair'
                  dislikes:
                    type: array
                    items:
                      $ref: '#/components/schemas/IDNamePair'
                  health_conditions:
                    type: array
                    items:
                      $ref: '#/components/schemas/IDNamePair'
                  spice_levels:
                    type: array
                    items:
                      $ref: '#/components/schemas/IDNamePair'
                  cooking_methods:
                    type: array
                    items:
                      $ref: '#/components/schemas/IDNamePair'
              examples:
                userPreferences:
                  value:
                    dietary_requirements:
                      - id: 1
                        name: "Vegetarian"
                    allergies:
                      - id: 1
                        name: "Peanuts"
                    cuisines:
                      - id: 2
                        name: "French"
                      - id: 5
                        name: "Italian"
                    dislikes:
                      - id: 4
                        name: "Chicken Thigh Fillets"
                    health_conditions: [ ]
                    spice_levels:
                      - id: 1
                        name: "Mild"
                      - id: 2
                        name: "Medium"
                    cooking_methods:
                      - id: 1
                        name: "Bake"
                      - id: 4
                        name: "Grill"
        '400':
          description: User ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User preferences not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Update user preferences
      description: Updates the user's preferences
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dietary_requirements:
                  type: array
                  items:
                    type: integer
                allergies:
                  type: array
                  items:
                    type: integer
                cuisines:
                  type: array
                  items:
                    type: integer
                dislikes:
                  type: array
                  items:
                    type: integer
                health_conditions:
                  type: array
                  items:
                    type: integer
                spice_levels:
                  type: array
                  items:
                    type: integer
                cooking_methods:
                  type: array
                  items:
                    type: integer
            example:
              dietary_requirements: [ 1, 2, 4 ]
              allergies: [ 1 ]
              cuisines: [ 2, 5 ]
              dislikes: [ 4 ]
              health_conditions: [ ]
              spice_levels: [ 1, 2 ]
              cooking_methods: [ 1, 4, 5 ]
      responses:
        '204':
          description: User preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: User ID is required or Request body is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /userprofile:
    get:
      summary: Get user profile
      description: Retrieves the user's profile
      # TODO should not use requestBody for GET
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: User profile fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          description: Email is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update user profile
      description: Updates the user's profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '204':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: User ID is required or Request body is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /notifications:
    post:
      summary: Create a new notification
      description: Creates a new notification for a specific user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: Unique identifier of the user.
                type:
                  type: string
                  description: Type of notification (e.g., Email, Server, Phone).
                content:
                  type: string
                  description: Content of the notification.
              required:
                - user_id
                - type
                - content
            example:
              user_id: 123
              type: "Email"
              content: "This is a test notification"
      responses:
        201:
          description: Notification created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  notification:
                    type: object
                    properties:
                      simple_id:
                        type: integer
                      user_id:
                        type: integer
                      type:
                        type: string
                      content:
                        type: string
                      status:
                        type: string
                      timestamp:
                        type: string
                        format: date-time
        400:
          description: Bad Request - Missing required fields
        500:
          description: Internal Server Error

  /notifications/{user_id}:
    get:
      summary: Get all notifications for a specific user
      description: Retrieves all notifications associated with a specific `user_id`.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: Unique identifier of the user.
      responses:
        200:
          description: List of notifications for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    simple_id:
                      type: integer
                    user_id:
                      type: integer
                    type:
                      type: string
                    content:
                      type: string
                    status:
                      type: string
                    timestamp:
                      type: string
                      format: date-time
        404:
          description: No notifications found for the user
        500:
          description: Internal Server Error

  /notifications/{simple_id}:
    delete:
      summary: Delete a specific notification by simple ID
      description: Deletes a notification identified by its `simple_id` (integer).
      parameters:
        - in: path
          name: simple_id
          required: true
          schema:
            type: integer
          description: Simple identifier (integer) of the notification.
      responses:
        200:
          description: Notification deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Notification deleted successfully"
        404:
          description: Notification not found
        500:
          description: Internal Server Error

    put:
      summary: Update notification status by simple ID
      description: Updates the status of a notification identified by its `simple_id` (integer).
      parameters:
        - in: path
          name: simple_id
          required: true
          schema:
            type: integer
          description: Simple identifier (integer) of the notification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: New status for the notification (e.g., "read" or "unread").
              required:
                - status
            example:
              status: "read"
      responses:
        200:
          description: Notification updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  notification:
                    type: object
                    properties:
                      simple_id:
                        type: integer
                      user_id:
                        type: integer
                      type:
                        type: string
                      content:
                        type: string
                      status:
                        type: string
                      timestamp:
                        type: string
                        format: date-time
        404:
          description: Notification not found
        500:
          description: Internal Server Error
  /substitution/ingredient/{ingredientId}:
    get:
      summary: Get ingredient substitutions
      description: Retrieves substitution options for a specific ingredient, with optional filtering by allergies, dietary requirements, and health conditions.
      parameters:
        - name: ingredientId
          in: path
          required: true
          description: ID of the ingredient to find substitutions for
          schema:
            type: integer
        - name: allergies
          in: query
          required: false
          description: List of allergy IDs to exclude from substitutions. Pass as a comma-separated string.
          schema:
            type: string
            example: "2,3"
        - name: dietaryRequirements
          in: query
          required: false
          description: List of dietary requirement IDs to filter substitutions by. Pass as a comma-separated string.
          schema:
            type: string
            example: "1,4"
        - name: healthConditions
          in: query
          required: false
          description: List of health condition IDs to consider for substitutions. Pass as a comma-separated string.
          schema:
            type: string
            example: "2,5"
      responses:
        '200':
          description: Substitution options retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientSubstitutionResponse'
        '400':
          description: Bad request - missing ingredient ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Ingredient not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /filter:
    get:
      summary: Filter recipes
      description: Retrieve recipes filtered by dietary preferences and allergens.
      tags:
        - Recipes
      parameters:
        - name: allergies
          in: query
          description: List of allergens to exclude from the recipes. Pass as a comma-separated string or array.
          required: false
          schema:
            type: string
            example: Peanut,Soy
        - name: dietary
          in: query
          description: Dietary preference to filter by (e.g., vegan, vegetarian).
          required: false
          schema:
            type: string
            example: vegan
        - name: include_details
          in: query
          required: false
          description: Whether to include full relationship details
          schema:
            type: string
            enum: [true, false]
            default: true
      responses:
        '200':
          description: Filtered recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Recipe ID
                      example: 1
                    name:
                      type: string
                      description: Name of the recipe
                      example: Vegan Salad
                    recipe_ingredients:
                      type: array
                      description: Ingredients used in the recipe
                      items:
                        type: object
                        properties:
                          ingredient_id:
                            type: integer
                            description: ID of the ingredient
                            example: 3
                          ingredients:
                            type: object
                            properties:
                              name:
                                type: string
                                description: Name of the ingredient
                                example: Lettuce
                              allergen:
                                type: string
                                description: Allergen associated with the ingredient
                                example: null
                              dietary_flag:
                                type: string
                                description: Dietary classification of the ingredient
                                example: vegan
        '400':
          description: Error in filtering recipes
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
                    example: "Allergy type not found"    

  /auth/log-login-attempt:
    post:
      summary: Log a login attempt
      description: Records a login attempt in the auth_logs table with email, user ID (optional), IP, timestamp, and success status.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginLog'
      responses:
        '201':
          description: Login attempt logged successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /recipe/cost/{recipe_id}:
  /recipe/cost:
    post:
      summary: Estimate recipe cost
      description: Estimates the cost of a given recipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeCostEstimationRequest'
      responses:
        '200':
          description: Cost estimation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeCostEstimationResponse'
        '400':
          description: Bad request - invalid recipe data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health-news:
    get:
      summary: Calculate estimated cost for a recipe
      description: Returns JSON array containing total cost and corresponding ingredients price
      summary: Unified Health News API
      description: Comprehensive API for health news management with multiple actions and flexible filtering
      parameters:
        - in: path
          name: recipe_id
          required: true
        - name: action
          in: query
          required: false
          description: |
            Action to perform (optional - API will auto-detect based on provided parameters):
              - "filter" (default): Filter health news articles using flexible criteria
              - "getById": Get specific health news by ID (requires id parameter)
              - "getByCategory": Get news by category (requires categoryId parameter)
              - "getByAuthor": Get news by author (requires authorId parameter)
              - "getByTag": Get news by tag (requires tagId parameter)
              - "getAllCategories": Get all categories
              - "getAllAuthors": Get all authors
              - "getAllTags": Get all tags
          schema:
            type: string
            enum: [filter, getAll, getById, getByCategory, getByAuthor, getByTag, getAllCategories, getAllAuthors, getAllTags]
            default: filter
        - name: id
          in: query
          required: false
          description: Health news ID
          schema:
            type: string
            format: uuid
        - name: categoryId
          in: query
          required: false
          description: Category ID
          schema:
            type: string
            format: uuid
        - name: authorId
          in: query
          required: false
          description: Author ID
          schema:
            type: string
            format: uuid
        - name: tagId
          in: query
          required: false
          description: Tag ID
          schema:
            type: string
            format: uuid
        - name: title
          in: query
          required: false
          description: Filter news by title (partial match)
          schema:
            type: string
        - name: content
          in: query
          required: false
          description: Filter news by content (partial match)
          schema:
            type: string
        - name: author_name
          in: query
          required: false
          description: Filter news by author name (partial match)
          schema:
            type: string
        - name: category_name
          in: query
          required: false
          description: Filter news by category name (partial match)
          schema:
            type: string
        - name: tag_name
          in: query
          required: false
          description: Filter news by tag name (partial match)
          schema:
            type: string
        - name: start_date
          in: query
          required: false
          description: Filter news published on or after this date (ISO format)
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          required: false
          description: Filter news published on or before this date (ISO format)
          schema:
            type: string
            format: date-time
        - name: sort_by
          in: query
          required: false
          description: Field to sort by
          schema:
            type: string
            default: published_at
        - name: sort_order
          in: query
          required: false
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: limit
          in: query
          required: false
          description: Number of records to return
          schema:
            type: integer
          description: Integer ID of the recipe for cost calculation
            default: 20
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: include_details
          in: query
          required: false
          description: Whether to include full relationship details
          schema:
            type: string
            enum: [true, false]
            default: true
      responses:
        '200':
          description: Calculate cost successfully
          description: Successfully retrieved requested data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimatedCost'
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    oneOf:
                      - type: array
                        items:
                          $ref: '#/components/schemas/HealthNews'
                      - $ref: '#/components/schemas/HealthNews'
                      - type: array
                        items:
                          $ref: '#/components/schemas/Category'
                      - type: array
                        items:
                          $ref: '#/components/schemas/Author'
                      - type: array
                        items:
                          $ref: '#/components/schemas/Tag'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 48
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 20
                      total_pages:
                        type: integer
                        example: 3
    post:
      summary: Unified Health News Creation API
      description: Create health news articles and related entities
      parameters:
        - name: action
          in: query
          required: false
          description: |
            Action to perform:
              - "createNews" (default): Create a new health news article
              - "createCategory": Create a new category
              - "createAuthor": Create a new author
              - "createTag": Create a new tag
          schema:
            type: string
            enum: [createNews, createCategory, createAuthor, createTag]
            default: createNews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    title:
                      type: string
                      example: "Diet and Health: How to Plan Your Daily Meals"
                    summary:
                      type: string
                      example: "This article explains how to maintain health through proper meal planning"
                    content:
                      type: string
                      example: "Proper eating habits are essential for health."
                    author_id:
                      type: string
                      format: uuid
                      example: "123e4567-e89b-12d3-a456-426614174001"
                    category_id:
                      type: string
                      format: uuid
                      example: "123e4567-e89b-12d3-a456-426614174003"
                  required:
                    - title
                    - content
                - type: object
                  properties:
                    name:
                      type: string
                      example: "Nutrition"
                    description:
                      type: string
                      example: "Articles about food nutrition"
                  required:
                    - name
                - type: object
                  properties:
                    name:
                      type: string
                      example: "Dr. Smith"
                    bio:
                      type: string
                      example: "Nutrition expert with 20 years of experience"
                  required:
                    - name
                - type: object
                  properties:
                    name:
                      type: string
                      example: "Weight Loss"
                  required:
                    - name
      responses:
        '201':
          description: Resource created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "123e4567-e89b-12d3-a456-426614174000"
                      title:
                        type: string
                        example: "Diet and Health: How to Plan Your Daily Meals"
    put:
      summary: Update Health News
      description: Update health news articles
      parameters:
        - name: id
          in: query
          required: true
          description: Health news ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Diet and Health: How to Plan Your Daily Meals (Updated)"
                summary:
                  type: string
                  example: "This article explains how to maintain health through proper meal planning"
      responses:
        '200':
          description: Health news updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/HealthNews'
        '400':
          description: Bad request - missing required parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Health news not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete Health News
      description: Delete health news articles
      parameters:
        - name: id
          in: query
          required: true
          description: Health news ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Health news deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Health news successfully deleted
        '400':
          description: Bad request - missing required parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Health news not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /recipe/cost/{recipe_id}/{exclude_ids}:
    get:
      summary: Calculate estimated cost for a recipe, with option for excluding ingredients
      description: Returns JSON array containing total cost and corresponding ingredients price
      parameters:
        - in: path
          name: recipe_id
          required: true
          schema:
            type: integer
          description: Integer ID of the recipe for cost calculation
        - in: path
          name: exclude_ids
          required: true
          schema:
            type: string
          description: List of ingredient ids to be excluded, separated by commas
      responses:
        '200':
          description: Calculate cost successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimatedCost'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /recipe/nutritionlog:
    get:
      summary: Get full nutrition info for a recipe by name
      description: Returns nutritional values of a recipe based on recipe_name
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
          description: The name of the recipe to search (case-insensitive)
      responses:
        '200':
          description: Nutritional info returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipe_name:
                    type: string
                  calories:
                    type: number
                  fat:
                    type: number
                  carbohydrates:
                    type: number
                  protein:
                    type: number
                  fiber:
                    type: number
                  vitamin_a:
                    type: number
                  vitamin_b:
                    type: number
                  vitamin_c:
                    type: number
                  vitamin_d:
                    type: number
                  sodium:
                    type: number
                  sugar:
                    type: number
        '400':
          description: Missing recipe name query parameter
        '404':
          description: Recipe not found
        '500':
          description: Internal server error                  
  /recipe/cost/{recipe_id}/{exclude_ids}:
    get:
      summary: Calculate estimated cost for a recipe, with option for excluding ingredients
      description: Returns JSON array containing total cost and corresponding ingredients price
      parameters:
        - in: path
          name: recipe_id
          required: true
          schema:
            type: integer
          description: Integer ID of the recipe for cost calculation
        - in: path
          name: exclude_ids
          required: true
          schema:
            type: string
          description: List of ingredient ids to be excluded, separated by commas
      responses:
        '200':
          description: Calculate cost successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimatedCost'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /healthArticles:
    get:
      summary: Search health articles
      description: |
        Search for health articles based on query string. The search is performed across article titles, tags, and content.
        Results can be paginated, sorted, and filtered.
      parameters:
        - name: query
          in: query
          required: true
          description: Search query string
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: 
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          required: false
          description: 
          schema:
            type: integer
            minimum: 1
            default: 10
        - name: sortBy
          in: query
          required: false
          description: 
          schema:
            type: string
            enum: [created_at, title, views]
            default: created_at
        - name: sortOrder
          in: query
          required: false
          description: Sort order (asc or desc)
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Successful search
          
  /water-intake:
    post:
      summary: Update the number of glasses of water consumed
      description: Updates the user's daily water intake by adding the number of glasses consumed.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                  description: The unique ID of the user
                glasses_consumed:
                  type: integer
                  description: Number of glasses consumed
              required:
                - user_id
                - glasses_consumed
            example:
              user_id: "15"
              glasses_consumed: 5
      responses:
        '200':
          description: Water intake updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Water intake updated successfully"
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                        example: "15"
                      date:
                        type: string
                        format: date
                        example: "2025-05-10"
                      glasses_consumed:
                        type: integer
                        example: 5
                      updated_at:
                        type: string
                        format: date-time
                        example: "2025-05-10T12:00:00Z"
        '400':
          description: Bad request - missing or invalid fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chatbot/history:
    post:
      summary: Get chat history
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdRequest'
      responses:
        '200':
          description: Chat history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatHistoryResponse'
        '500':
          description: Internal server error

    delete:
      summary: Clear chat history
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdRequest'
      responses:
        '200':
          description: Chat history cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '500':
          description: Internal server error

  /medical-report/retrieve:
    post:
      summary: Predict obesity level and diabetes risks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicalReportRequest'
      responses:
        '200':
          description: Obesity level and diabetes risk result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalReportResponse'
        '400':
          description: Bad Request - Invalid input data.
        '401':
          description: Unauthorized - Authentication credentials missing or invalid.
        '500':
          description: Internal Server Error - Something went wrong on the server.
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                  description: The unique ID of the user
                glasses_consumed:
                  type: integer
                  description: Number of glasses consumed
              required:
                - user_id
                - glasses_consumed
              example:
              user_id: "15"
              glasses_consumed: 5
      responses:
        '200':
          description: Water intake updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Water intake updated successfully"
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                        example: "15"
                      date:
                        type: string
                        format: date
                        example: "2025-05-10"
                      glasses_consumed:
                        type: integer
                        example: 5
                      updated_at:
                        type: string
                        format: date-time
                        example: "2025-05-10T12:00:00Z"
        '400':
          description: Bad request - missing or invalid fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: test@email.com
        password:
          type: string
          example: test123
      required:
        - email
        - password
    SignupRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        contact_number:
          type: string
        address:
          type: string
      required:
        - name
        - email
        - password
        - contact_number
        - address
    LoginWithMFARequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          format: password
        mfa_token:
          type: string
      required:
        - email
        - password
        - mfa_token
    UserResponse:
      type: object
      properties:
        user_id:
          type: integer
        email:
          type: string
        password:
          type: string
        mfa_enabled:
          type: boolean
    UserUpdateRequest:
      type: object
      properties:
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        contact_number:
          type: string
    UserProfileResponse:
      type: object
      properties:
        user_id:
          type: integer
        name:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        contact_number:
          type: string
        mfa_enabled:
          type: boolean
    JWTResponse:
      type: string
    ContactRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        message:
          type: string
      required:
        - name
        - email
        - message
    FeedbackRequest:
      type: object
      properties:
        name:
          type: string
        contact_number:
          type: string
        email:
          type: string
          format: email
        experience:
          type: string
        message:
          type: string
      required:
        - name
        - contact_number
        - email
        - experience
        - message
    IDNamePair:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Appointment:
      type: object
      properties:
        userId:
          type: integer
        date:
          type: string
          format: date-time
        time:
          type: string
        description:
          type: string
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
    Recipe:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        ingredients:
          type: array
          items:
            type: string
        cooking_method:
          type: string
        cuisine:
          type: string
        spice_level:
          type: string
        health_condition:
          type: string
        dietary_requirement:
          type: string
        allergy:
          type: string
        dislikes:
          type: string
    MealPlanRecipe:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
        details:
          type: object
          properties:
            calories:
              type: number
            fats:
              type: number
            proteins:
              type: number
            vitamins:
              type: number
            sodium:
              type: number
    CreateMealPlanRequest:
      type: object
      properties:
        id:
          type: integer
        meal_type:
          type: string
        recipes:
          type: array
          items:
            $ref: '#/components/schemas/MealPlanRecipe'
    MealPlanResponse:
      type: object
      properties:
        user_id:
          type: integer
        meal_type:
          type: string
        recipe_ids:
          type: array
          items:
            type: integer
                
    LoginLog:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        user_id:
          type: integer
          nullable: true
          example: 123
        success:
          type: boolean
          example: true
        ip_address:
          type: string
          example: "192.168.1.1"
        created_at:
          type: string
          format: date-time
          example: "2025-03-23T13:45:00Z"
      required:
        - email
        - success
        - ip_address
        - created_at

    EstimatedCost:
        type: object
        properties:
          info: 
            type: object
            properties:
              estimation_type:
                type: string
              include_all_wanted_ingredients:
                type: boolean
              minimum_cost:
                type: number
              maximum_cost:
                type: number
          low_cost:
            type: object
            properties:
              price:
                type: number
              count:
                type: number
              ingredients:
                type: array
                items:
                  type: object
                  properties:
                    ingredient_id: 
                      type: integer
                    product_name: 
                      type: string
                    quantity: 
                      type: string
                    purchase_quantity: 
                      type: integer
                    total_cost: 
                      type: number
          high_cost:
            type: object
            properties:
              price:
                type: number
              count:
                type: number
              ingredients:
                type: array
                items:
                  type: object
                  properties:
                    ingredient_id: 
                      type: integer
                    product_name: 
                      type: string
                    quantity: 
                      type: string
                    purchase_quantity: 
                      type: integer
                    total_cost: 
                      type: number

          minimum_cost:
            type: number
          maximum_cost:
            type: number
          include_all_ingredients:
            type: boolean
          low_cost_ingredients:
            type: array
            items:
              type: object
              properties:
                ingredient_id: 
                  type: integer
                product_name: 
                  type: string
                quantity: 
                  type: string
                purchase_quantity: 
                  type: integer
                total_cost: 
                  type: number
          high_cost_ingredients:
            type: array
            items:
              type: object
              properties:
                ingredient_id: 
                  type: integer
                product_name: 
                  type: string
                quantity: 
                  type: string
                purchase_quantity: 
                  type: integer
                total_cost: 
                  type: number

    HealthNews:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "Diet and Health: How to Plan Your Daily Meals"
        summary:
          type: string
          example: "This article explains how to maintain health through proper meal planning"
        author:
          type: object
          properties:
            name:
              type: string
              example: "Dr. Smith"
        category:
          type: object
          properties:
            name:
              type: string
              example: "Nutrition"
        image_url:
          type: string
          format: url
          example: "https://example.com/images/healthy-eating.jpg"
        published_at:
          type: string
          format: date-time
          example: "2023-09-15T10:30:00Z"

    HealthNewsCreateRequest:
      type: object
      properties:
        title:
          type: string
          example: "Diet and Health: How to Plan Your Daily Meals"
        summary:
          type: string
          example: "This article explains how to maintain health through proper meal planning"
        content:
          type: string
          example: "Proper eating habits are essential for health."
        author_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174001"
        category_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174003"
        image_url:
          type: string
          format: url
          example: "https://example.com/images/healthy-eating.jpg"

    HealthNewsUpdateRequest:
      type: object
      properties:
        title:
          type: string
          example: "Diet and Health: How to Plan Your Daily Meals (Updated)"
        summary:
          type: string
          example: "This article explains how to maintain health through proper meal planning"
        category_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174003"

    Author:
      type: object
      properties:
        name:
          type: string
          example: "Dr. Smith"
        bio:
          type: string
          example: "Nutrition expert with 20 years of experience"

    Source:
      type: object
      properties:
        name:
          type: string
          example: "Health Times"
        base_url:
          type: string
          format: url
          example: "https://health-news.com"

    Category:
      type: object
      properties:
        name:
          type: string
          example: "Nutrition"
        description:
          type: string
          example: "Articles about food nutrition"

    Tag:
      type: object
      properties:
        name:
          type: string
          example: "Weight Loss"

    # Chatbot-related Schemas
    ChatbotQueryRequest:
      type: object
      properties:
        user_id:
          type: integer
        user_input:
          type: string

    ChatbotQueryResponse:
      type: object
      properties:
        response_text:
          type: string
        # optional message field
        message:
          type: string

    ChatHistoryResponse:
      type: object
      properties:
        message:
          type: string
        chat_history:
          type: array
          items:
            type: object
            properties:
              user_input:
                type: string
              response_text:
                type: string
              timestamp:
                type: string
                format: date-time

    GenericSuccessResponse:
      type: object
      properties:
        message:
          type: string

    UserIdRequest:
      type: object
      properties:
        user_id:
          type: integer

    MedicalReportRequest:
      MedicalReportRequest:
      type: object
      required:
        - Gender
        - Age
        - Height
        - Weight
        - Any family history of overweight (yes/no)
        - Frequent High Calorie Food Consumption (yes/no)
        - Consumption of vegetables in meals
        - Consumption of Food Between Meals
        - Number of Main Meals
        - Daily Water Intake
        - Do you Smoke?
        - Do you monitor your daily calories?
        - Physical Activity Frequency
        - Time Using Technology Devices Daily
        - Alcohol Consumption Rate
        - Mode of Transportation you use
      properties:
        Gender:
          type: string
          description: Gender of the individual.
          example: "Male"
        Age:
          type: number
          format: float
          description: Age in years.
          example: 24.443011
        Height:
          type: number
          format: float
          description: Height in meters.
          example: 1.699998
        Weight:
          type: number
          format: float
          description: Weight in kilograms.
          example: 81.66995
        Any family history of overweight (yes/no):
          type: string
          enum: ["yes", "no"]
          description: Indicates if there is a family history of being overweight.
          example: "yes"
        Frequent High Calorie Food Consumption (yes/no):
          type: string
          enum: ["yes", "no"]
          description: Indicates frequent consumption of high-calorie food.
          example: "yes"
        Consumption of vegetables in meals:
          type: number
          format: float
          description: Frequency of vegetable consumption in meals.
          example: 2.7
        Consumption of Food Between Meals:
          type: string
          enum: ["no", "Sometimes", "Frequently", "Always"]
          description: Frequency of consuming food between meals.
          example: "Sometimes"
        Number of Main Meals:
          type: number
          format: float
          description: Number of main meals per day.
          example: 2.983297
        Daily Water Intake:
          type: number
          format: float
          description: Daily water intake in liters.
          example: 2.763573
        Do you Smoke?:
          type: string
          enum: ["yes", "no"]
          description: Indicates if the individual smokes.
          example: "no"
        Do you monitor your daily calories?:
          type: string
          enum: ["yes", "no"]
          description: Indicates if the person monitors their daily calorie intake.
          example: "no"
        Physical Activity Frequency:
          type: number
          format: float
          description: Frequency of physical activity per week.
          example: 0
        Time Using Technology Devices Daily:
          type: number
          format: float
          description: Time spent using technological devices daily (in hours).
          example: 0.976473
        Alcohol Consumption Rate:
          type: string
          enum: ["no", "never", "Sometimes", "Frequently", "Always"]
          description: Frequency of alcohol consumption.
          example: "Sometimes"
        Mode of Transportation you use:
          type: string
          enum: ["Car", "Motorbike", "Bike", "Public_Transportation", "Walking"]
          description: Common mode of transportation used.
          example: "Public_Transportation"

    MedicalReportResponse:
      type: object
      properties:
        medical_report:
          type: object
          description: Report containing obesity and diabetes predictions.
          properties:
            obesity_prediction:
              type: object
              properties:
                obesity_level:
                  type: string
                  description: Predicted obesity level.
                  example: "Obese"
            diabetes_prediction:
              type: object
              properties:
                diabetes:
                  type: boolean
                  description: Indicates if diabetes is predicted (true or false).
                  example: true
                confidence:
                  type: number
                  format: float
                  description: Model confidence score for diabetes prediction.
                  example: 0.798

